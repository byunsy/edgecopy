import os
import sys
import pandas as pd
import numpy as np
from glob import glob

def concat_eval_files(eval_dir):
    
    fps = glob(os.path.join(eval_dir, f'*.eval'))
    dfs = [pd.read_csv(fp, sep='\t') for fp in fps]
    concat_df = pd.concat(dfs, axis=0).reset_index(drop=True)
    return concat_df


def v_correct(estim, truth, refCN):
    """
    Input
    - estim1: HMM estimate without qual threshold
    - estim2: HMM estimate with q>20 threshold
    - truth : ground truth
    
    Compute the number of correctly estimated agCNs
    - separately for reference vs non-reference CN
    """

    estim = str(estim).split(',')
    truth = str(truth).split(',')
    
    if len(estim) != len(truth):
        raise ValueError("Input arrays must have the same length. "
                         f"e={len(estim)}, t={len(truth)}.")
        
    EXONLEN = len(estim)
    is_ref = all(t==str(refCN) for t in truth if t!='.')
        
    total, corrc, error, filtr = 0, 0, 0, 0
    num_notruth = 0
    
    for i in range(EXONLEN):
        
        # If ground truth unavailable
        if truth[i] == '.':
            num_notruth += 1
            continue
        
        total += 1
        if estim[i]=='_':
            filtr += 1
        else:
            if estim[i] == truth[i]:
                corrc += 1
            else:
                error += 1

    EXONLEN_ANALYZED = EXONLEN - num_notruth
    if not EXONLEN_ANALYZED:
        return np.array([np.nan]*10)
    
    acc = corrc/total
    err = error/total
    fil = filtr/total
    assert np.isclose(acc+err+fil, 1, atol=1e-8)
    
    if not total-filtr:
        acc_f, err_f = np.nan, np.nan
    else:
        acc_f = corrc/(total-filtr)
        err_f = error/(total-filtr)
        assert np.isclose(acc_f+err_f, 1, atol=1e-8)
    
    if is_ref:
        return np.array([acc, err, fil, acc_f, err_f]+[np.nan]*5)

    return np.array([np.nan]*5+[acc, err, fil, acc_f, err_f])


def compute_score(comm_df, eval_dir):
    """
    Compute precision and recall values for genes with common CNVs
    """
    save_df = []
    for unique_refcn in comm_df.refcn.unique():
        print('='*50)
        print('Reference copy number:', unique_refcn)
        print('='*50)
    
        df = comm_df.loc[comm_df.refcn == unique_refcn].copy()
        df['refcn'] = df.refcn.astype('Int32')

        df[[
            'ref_acc', 'ref_err', 'ref_fil', 'ref_acc_f', 'ref_err_f',
            'nref_acc', 'nref_err', 'nref_fil', 'nref_acc_f', 'nref_err_f'
        ]] = df.apply(lambda row: pd.Series(v_correct(row.hmm, row.truth, row.refcn)), axis=1)

        df_acc1 = pd.DataFrame(df.groupby('locus')[['ref_acc_f', 'nref_acc_f']].mean()).reset_index()
        # df_acc2 = pd.DataFrame(df.groupby('locus')[['ref_acc', 'ref_err', 'ref_fil']].mean()).reset_index()
        # df_acc3 = pd.DataFrame(df.groupby('locus')[['nref_acc', 'nref_err', 'nref_fil']].mean()).reset_index()
        
        print(*round(df_acc1[['ref_acc_f','nref_acc_f']].mean(), 4).to_list(),sep='\n')
        print()

        df_acc1['refcn'] = unique_refcn
        df_acc1['method'] = 'Edgecopy'
        print(df_acc1)
        
        save_df.append(df_acc1)

    outfp = os.path.join(eval_dir, 'comm_cnvs.concordance.tsv')
    to_save = pd.concat(save_df, axis=0).reset_index(drop=True)
    to_save.to_csv(outfp, sep='\t', na_rep='NaN', index=None)
    
    return outfp


def run(eval_dir, refcn_fp):
    """
    eval_dir : Directory generated by running evaluate.py, containing all eval files
    refcn_fp : A TSV file with gene, refcn, and position (optional)
    """
    
    # Get reference copy numbers for genes to analyze
    refcns = pd.read_csv(refcn_fp, sep='\t', header=None, names=['gene', 'refcn', 'pos'])
    refcns = refcns[['gene', 'refcn']]
    refcns = dict(zip(refcns['gene'], refcns['refcn']))

    # Get evaluation files of genes to analyze
    concat_df = concat_eval_files(eval_dir)
    concat_df['refcn'] = concat_df.apply(lambda row: refcns.get(row.locus), axis=1)

    comm_cnvs = concat_df.locus.unique()
    comm_df = concat_df.loc[concat_df.alpha_beta > 1000].copy()

    print(f'Number of genes with common CNVs in {eval_dir}:', len(comm_cnvs))
    print("DataFrame shape:", comm_df.shape)
    print("- Analyzing", comm_df['name'].unique().shape[0], "unique samples.")
    
    saved_fp = compute_score(comm_df, eval_dir)
    print(f"\nCompleted. Saved to {saved_fp}")
    
    
if __name__ == '__main__':
    eval_dir, refcn_fp = sys.argv[1], sys.argv[2]
    run(eval_dir, refcn_fp)